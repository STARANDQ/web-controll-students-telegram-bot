const {MenuTemplate, MenuMiddleware} = require('telegraf-inline-menu')

const {Telegraf, Markup, Scenes, session} = require('telegraf')

const bot = new Telegraf('2019192872:AAHAYPXof29I2Mf5uvh_YuZi6ZPvzzlvHZs')

const SceneGenerator = require('./Scenes')
const {MongoClient} = require('mongodb')

const client = new MongoClient('mongodb+srv://iterhim:igornazar5@cluster0.ieu9k.mongodb.net/PROJETIGOR?retryWrites=true&w=majority')


const CurScene = new SceneGenerator()

const pibScene = CurScene.GenPIBScene()
const numScene = CurScene.GenNumScene()
// const pibvScene = CurScene.GenPIBVScene()
// const numvScene = CurScene.GenNumvScene()
// const arrstud = CurScene.GenArrStudScene()
// const PIBk = CurScene.GenPIBKScene()
// const emK = CurScene.GenEmailKScene()
// const MPk = CurScene.GenPhoneKScene()
// const zakl = CurScene.GenzakladScene()
// const parK = CurScene.GenParKScene()

// const lessname = CurScene.GenLessNameScene()

const stage = new Scenes.Stage([
    pibScene,
    numScene,
    // pibvScene,
    // numvScene,
    // arrstud,
    // lessname,
    // PIBk,
    // emK,
    // MPk,
    // zakl,
    // parK,
]);
bot.use(stage.middleware())


let vykladach = {}


// –≤–∏–∫–ª–∞–¥–∞—á –º–µ–Ω—é
bot.action('vykl', (ctx) => {
    return ctx.reply('<b>–≤–∏–∫–ª–∞–¥–∞—á –º–µ–Ω—é</b>', {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤', 'allstud')],//half
                [Markup.button.callback('–ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤', 'allsubjects')],//not
                [Markup.button.callback('–≤–∏–π—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é', 'exit')],//complete
            ])
    })
})

//—Å—Ç—É–¥–µ–Ω—Ç –º–µ–Ω—é
bot.action('student', (ctx) => {
    return ctx.reply('<b>—Å—Ç—É–¥–µ–Ω—Ç –º–µ–Ω—é</b>', {
        parse_mode: 'HTML',
        ...Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å', 'borgi')],//
                [Markup.button.callback('–ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤', 'allsubjectsstud')],//–Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É
                [Markup.button.callback('–≤–∏–π—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é', 'exit')],//–≥–æ—Ç–æ–≤–æ
            ])
    })
})
//–≤–∏–∫–ª–∞–¥–∞—á –ø—É–Ω–∫—Ç–∏ –º–µ–Ω—é
//1
bot.action('allstud', async (ctx) => {
    // masiv students
    await client.connect()
        console.log('–≤—Å—å–æ –æ–∫')
        const users = client.db().collection('students');
        const user = await users.findOne()
        ctx.reply(user)
})
//2
bot.action('allsubjects', async (ctx) => {
    // masiv subjects
    await client.connect()
    console.log('–≤—Å—å–æ –æ–∫')
    const users = client.db().collection('vykladachs');
    const user = await users.findOne()
    ctx.reply(user)
})
// student menu 1
bot.action('borgi', async (ctx, next) => {

    // masiv –±–æ—Ä–≥–∏
    await client.connect()
    console.log('–≤—Å—å–æ –æ–∫')
    const users = client.db().collection('vykladachs');
    const user = await users.findOne()
    ctx.reply(user)
})
bot.action('allsubjectsstud', async (ctx, next) => {

    // masiv –±–æ—Ä–≥–∏
    await client.connect()
    console.log('–≤—Å—å–æ –æ–∫')
    const users = client.db().collection('vykladachs');
    const user = await users.findOne()
    ctx.reply(user.lesson)
})


// bot.action('fullListVukladachiv', async (ctx, next) => {
//
//         await ctx.reply('–º–∞—Å–∏–≤—á–∏–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤, —è–∫–∏—Ö –¥–æ–±–∞–≤–∏–≤ –∫—É—Ä–∞—Ç–æ—Ä)')
//
//         await client.connect()
//         console.log('–≤—Å—å–æ –æ–∫')
//         const users = client.db().collection('vykladachs');
//
//         const user = await users.findOne()
//         console.log(user);
//
//         let a = JSON.stringify(user);
//         await ctx.reply(a)
// }, )
// bot.action('fullListstudents', async (ctx, next) => {
//
//         await ctx.reply('–º–∞—Å–∏–≤—á–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, —è–∫–∏—Ö –¥–æ–±–∞–≤–∏–≤ –∫—É—Ä–∞—Ç–æ—Ä)')
//
//         await client.connect()
//         console.log('–≤—Å—å–æ –æ–∫')
//         const users = client.db().collection('students');
//
//         const user = await users.findOne()
//         console.log(user);
//
//         let a = JSON.stringify(user);
//         await ctx.reply(a)
// }, )


bot.use(session())
bot.use(stage.middleware())
bot.use(Telegraf.log())


// bot.action('addVukladacha', async (ctx, next) => {
//
//     await ctx.reply('—Ñ-—Ü—è –¥–æ–±–∞–≤–ª—è–Ω–Ω—è –≤–∏–∫–ª–∞–¥–∞—á–∞)')
//     await ctx.scene.enter('PIBv')
//
// })
// bot.action('addstudenta', async (ctx, next) => {
//
//     await ctx.reply('—Ñ-—Ü—è –¥–æ–±–∞–≤–ª—è–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞)')
//     await ctx.scene.enter('PIB')
//
// })
// bot.action('newKurator', async (ctx, next) => {
//
//     await ctx.reply('—Ñ-—Ü—è –¥–æ–±–∞–≤–ª—è–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞)')
//     await ctx.scene.enter('PIBk')
//
// })
//
bot.command('start', async (ctx) => {
    await ctx.scene.enter('PIB')
})
//3
bot.action('exit', async (ctx, next) => {
    await ctx.scene.enter('PIB')
})
bot.start((ctx) => ctx.reply('Welcome'))
bot.help((ctx) => ctx.reply('Send me a sticker'))
bot.on('sticker', (ctx) => ctx.reply('üëç'))
bot.command('/scene', async (ctx) => {
    // ctx.scene.enter('age')
})

bot.hears('hi', (ctx) => ctx.reply('Hey there'))
bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))

